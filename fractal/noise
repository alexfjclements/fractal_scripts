#!/usr/bin/env python

from __future__ import division
from numpy import *
import pylab

n = 1000
tt = arange(n)/(n-1)
m = 1000

# We're going to compute y(t) = sum_i c_i/(i+1) sin(2*pi*i*t), where c_i are random coefficients
c = random.randn(m)

def slow():
  # Extremely slow method: do everything with python loops
  yy = [] # Start with an empty list 
  for t in tt: # For each value of the independent variable
    y = 0
    for i in xrange(m): # for i = 0, 1, ... m-1
      y += c[i]/(i+1)*sin(2*pi*i*t)
    yy.append(y)
  return yy

def fast():
  # Much faster method: do the loop over i in python, but loop over tt with numpy
  yy = zeros_like(tt)
  for i in xrange(m):
    yy += c[i]/(i+1)*sin(2*pi*i*tt)
  return yy

def fastest():
  i = arange(m).reshape(-1,1)
  return (c.reshape(-1,1)/(i+1)*sin(2*pi*i*tt)).sum(axis=0)

pylab.title('Three implementations of the same function')
pylab.plot(tt,slow(),'r',label='slow')
print 'finished slow'
pylab.plot(tt,fast()+.001,'g',label='fast')
print 'finished fast'
pylab.plot(tt,fastest()+.002,'b',label='fastest')
print 'finished fastest'
pylab.legend()
pylab.show()
